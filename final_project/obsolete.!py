from scipy.ndimage import convolve, generate_binary_structure

# energy of a spin config in flat geometry
#--------------------------------------------------
# function to calculate energy in a flat geometry, i.e.,
# lattice points on the boundary do not have lattice points from the opposite edges as neighbours
def energy_flat(spin_config, J, h):
    '''Calculate total energy of a given spin config in flat geomtery, i.e.,
    lattice points on the edges don't have lattice points on the opposite edge as neighbours.
    Args:
        spin_config (2D numpy.ndarray): Spin config for which the energy is to be calculated
        J (float): Interaction parameter of the system
        h (float): Magnitude of the external magnetic field
    Returns:
        energy (float): Energy of the given spin config
    '''
    kern = generate_binary_structure(2, 1)
    kern[1][1] = False
    energy = -J*0.5*np.sum(spin_config * convolve(spin_config, kern, mode='constant', cval=0)) - h*np.sum(spin_config)
    return energy
#--------------------------------------------------

# energy change for flat geometry
#--------------------------------------------------
if mode == 'flat':
E_i = 0
E_f = 0
if x>0:
    E_i += -J*spin_i*spin_config[x-1,y]
    E_f += -J*spin_f*spin_config[x-1,y]
if x<N-1:
    E_i += -J*spin_i*spin_config[x+1,y]
    E_f += -J*spin_f*spin_config[x+1,y]
if y>0:
    E_i += -J*spin_i*spin_config[x,y-1]
    E_f += -J*spin_f*spin_config[x,y-1]
if y<N-1:
    E_i += -J*spin_i*spin_config[x,y+1]
    E_f += -J*spin_f*spin_config[x,y+1]
E_i += -h*spin_i
E_f += -h*spin_f
#--------------------------------------------------

# step to flip all the spins on the worm and check if it is favourable
#--------------------------------------------------
        spin_config_prime = spin_config.copy()
        xdata = [x for x, y  in worm]
        ydata = [y for x, y in worm]
        spin_config[xdata, ydata] = -1 * spin_config[xdata, ydata]
        ef = energy_toroid(spin_config, J, h)
        dE = ef - energy
        if (dE<0): continue
        if (dE>0)*(np.random.random() < np.exp(-beta*dE)): continue
        else:
            spin_config = spin_config_prime.copy()
            energy = ef
#--------------------------------------------------

# worm algo - first attempt @dongjin
#--------------------------------------------------
def worm_update(lattice, J, beta):
    N = lattice.shape[0]
    M = lattice.shape[1]
    worm_head = [np.random.randint(N), np.random.randint(M)]
    worm_tail = [worm_head[0], worm_head[1]]
    #worm_tail = [worm_head[0] - direction[0], worm_head[1] - direction[1]]
    worm_sites = [worm_head, worm_tail]
    
    # Check if the worm can grow in the current direction
    while True:
        direction = random.choice([[0,1], [0,-1], [1,0], [-1,0]])
        next_site = [ (worm_head[0] + direction[0])%N, (worm_head[1] + direction[1])%M ]
        #if next_site[0] < 0 or next_site[0] >= N or next_site[1] < 0 or next_site[1] >= M:
        #    break
        if random.uniform(0,1) < np.tanh(J*beta):
            worm_head = next_site
            worm_sites.append(worm_head)
        if lattice[next_site[0], next_site[1]] == lattice[worm_head[0], worm_head[1]]:
            break
        worm_head = next_site
        worm_sites.append(worm_head)
    
    # Try to flip the worm
#    energy_diff = 2 * lattice[worm_head[0], worm_head[1]] * np.sum([lattice[site[0], site[1]] for site in worm_sites])
#    if energy_diff <= 0 or random.uniform(0,1) < np.exp(-beta * energy_diff):
    for site in worm_sites:
        lattice[site[0], site[1]] *= -1
    
    return lattice

def simulate_ising_model(N, M, J, beta, num_steps):
    lattice = np.random.choice([-1, 1], size=(N, M))
    for step in range(num_steps):
        lattice = worm_update(lattice, J, beta)
    return lattice
#--------------------------------------------------